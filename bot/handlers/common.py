from bot import bot
from bot.models import User, AvitoAccount, UserAvitoAccount, AvitoAccountDailyStats, Settings
from bot.keyboards import main_markup
from bot.texts import MAIN_TEXT
from bot.services import get_daily_statistics, get_weekly_statistics
from bot.cron import store_account_daily_stats, store_account_weekly_stats
import telebot
from django.db import models
import datetime
from django.utils import timezone

import logging

logger = logging.getLogger(__name__)

class WeeklySummary:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    def __init__(self, total_calls=0, answered_calls=0, missed_calls=0, total_chats=0, 
                 new_chats=0, phones_received=0, rating=0, total_reviews=0, 
                 daily_reviews=0, total_items=0, xl_promotion_count=0, tools_subscription_count=0,
                 views=0, contacts=0, favorites=0, balance_real=0, 
                 balance_bonus=0, advance=0, daily_expense=0):
        self.total_calls = total_calls
        self.answered_calls = answered_calls
        self.missed_calls = missed_calls
        self.total_chats = total_chats
        self.new_chats = new_chats
        self.phones_received = phones_received
        self.rating = rating
        self.total_reviews = total_reviews
        self.daily_reviews = daily_reviews
        self.total_items = total_items
        self.xl_promotion_count = xl_promotion_count
        self.tools_subscription_count = tools_subscription_count
        self.views = views
        self.contacts = contacts
        self.favorites = favorites
        self.balance_real = balance_real
        self.balance_bonus = balance_bonus
        self.advance = advance
        self.daily_expense = daily_expense

def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from bot.handlers.registration import start_registration
    start_registration(message)

def menu_m(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    bot.send_message(
        chat_id=chat_id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def format_expenses_message(expenses):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    if not expenses:
        return "0.00 ‚ÇΩ"
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not isinstance(expenses, dict):
        return "0.00 ‚ÇΩ"
        
    total = expenses.get('total', 0)
    details = expenses.get('details', {})
    
    if total <= 0:
        return "0.00 ‚ÇΩ"
    
    message = f"{total:.2f} ‚ÇΩ\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if details:
        message += f"üìã *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
        sorted_details = sorted(
            details.items(), 
            key=lambda x: x[1]['amount'], 
            reverse=True
        )
        
        for service, service_details in sorted_details:
            amount = service_details.get('amount', 0)
            count = service_details.get('count', 1)
            items = service_details.get('items', [])
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            items_count = len(items) if items else 0
            items_suffix = ""
            if items_count > 0:
                items_suffix = f" ({items_count} –æ–±—ä—è–≤–ª.)"
            
            message += f"   ‚Ä¢ {service}{items_suffix}: {amount:.2f} ‚ÇΩ ({count} –æ–ø–µ—Ä.)\n"
    
    return message

def select_avito_account(chat_id, user_id, callback_prefix):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û–¢–õ–ê–î–ö–ê: select_avito_account –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, chat_id: {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.filter(telegram_id=user_id).first()
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        
        if not user:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ê–≤–∏—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ
        accounts = AvitoAccount.objects.filter(
            client_id__isnull=False,
            client_secret__isnull=False
        ).exclude(client_id="none").distinct()
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ: {accounts.count()}")
        
        if not accounts.exists():
            bot.send_message(chat_id, "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ")
            logger.error(f"–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
        if accounts.count() == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            account_id = accounts.first().id
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
            if callback_prefix == "daily_report":
                daily_report_for_account(chat_id, account_id)
            else:
                weekly_report_for_account(chat_id, account_id)
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        for account in accounts:
            button = telebot.types.InlineKeyboardButton(
                text=account.name,
                callback_data=f"{callback_prefix}_{account.id}"
            )
            markup.add(button)
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {account.name}, callback_data: {callback_prefix}_{account.id}")
            
        bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=markup
        )
    except User.DoesNotExist:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def daily_report(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: daily_report –≤—ã–∑–≤–∞–Ω, user_id: {user_id}, chat_id: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    parts = call.data.split("_")
    if len(parts) > 2 and parts[0] == "daily" and parts[1] == "report":
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç daily_report_ID, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            account_id = int(parts[2])
            daily_report_for_account(chat_id, account_id)
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        select_avito_account(chat_id, user_id, "daily_report")

def weekly_report(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: weekly_report –≤—ã–∑–≤–∞–Ω, user_id: {user_id}, chat_id: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    parts = call.data.split("_")
    if len(parts) > 2 and parts[0] == "weekly" and parts[1] == "report":
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç weekly_report_ID, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            account_id = int(parts[2])
            weekly_report_for_account(chat_id, account_id)
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        select_avito_account(chat_id, user_id, "weekly_report")

def calculate_percentage_change(current, previous):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
    if previous == 0:
        return 100 if current > 0 else 0
    return ((current - previous) / previous) * 100

def format_percentage_change(percentage, show_positive=True):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    if percentage > 0:
        return f"‚¨ÜÔ∏è +{percentage:.1f}%" if show_positive else f"‚¨ÜÔ∏è {percentage:.1f}%"
    elif percentage < 0:
        return f"‚¨áÔ∏è {percentage:.1f}%"
    else:
        return "‚è∫ 0%"

def get_previous_day_stats(account_id, current_date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
        previous_date = current_date - datetime.timedelta(days=1)
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∑–∞ {previous_date}")
        
        # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        previous_stats = AvitoAccountDailyStats.objects.filter(
            avito_account_id=account_id,
            date=previous_date
        ).first()
        
        if previous_stats:
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {previous_date} - –∑–≤–æ–Ω–∫–∏: {previous_stats.total_calls}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {previous_stats.views}, –∫–æ–Ω—Ç–∞–∫—Ç—ã: {previous_stats.contacts}")
        else:
            logger.warning(f"–û–¢–õ–ê–î–ö–ê: –ù–ï –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {previous_date} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            last_available = AvitoAccountDailyStats.objects.filter(
                avito_account_id=account_id,
                date__lt=current_date
            ).order_by('-date').first()
            
            if last_available:
                logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {last_available.date} - –∑–≤–æ–Ω–∫–∏: {last_available.total_calls}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {last_available.views}, –∫–æ–Ω—Ç–∞–∫—Ç—ã: {last_available.contacts}")
                return last_available
            else:
                logger.warning(f"–û–¢–õ–ê–î–ö–ê: –í–æ–æ–±—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        
        return previous_stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å: {e}")
        return None

def get_previous_week_stats(account_id, current_date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from bot.models import AvitoAccountWeeklyStats
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤ –ø—Ä–æ—à–ª–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        days_since_monday = current_date.weekday()
        current_week_start = current_date - datetime.timedelta(days=days_since_monday)
        previous_week_start = current_week_start - datetime.timedelta(days=7)
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ò—â–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –Ω–∞—á–∏–Ω–∞—è —Å {previous_week_start}")
        
        # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        previous_week_stats = AvitoAccountWeeklyStats.objects.filter(
            avito_account_id=account_id,
            week_start_date=previous_week_start
        ).first()
        
        if previous_week_stats:
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {previous_week_stats.week_start_date} - {previous_week_stats.week_end_date} - –∑–≤–æ–Ω–∫–∏: {previous_week_stats.total_calls}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {previous_week_stats.views}, –∫–æ–Ω—Ç–∞–∫—Ç—ã: {previous_week_stats.contacts}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç WeeklySummary —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
            return WeeklySummary(
                total_calls=previous_week_stats.total_calls,
                answered_calls=previous_week_stats.answered_calls,
                missed_calls=previous_week_stats.missed_calls,
                total_chats=previous_week_stats.total_chats,
                new_chats=previous_week_stats.new_chats,
                phones_received=previous_week_stats.phones_received,
                rating=previous_week_stats.rating,
                total_reviews=previous_week_stats.total_reviews,
                daily_reviews=previous_week_stats.weekly_reviews,
                total_items=previous_week_stats.total_items,
                xl_promotion_count=previous_week_stats.xl_promotion_count,
                tools_subscription_count=previous_week_stats.tools_subscription_count,
                views=previous_week_stats.views,
                contacts=previous_week_stats.contacts,
                favorites=previous_week_stats.favorites,
                balance_real=previous_week_stats.balance_real,
                balance_bonus=previous_week_stats.balance_bonus,
                advance=previous_week_stats.advance,
                daily_expense=previous_week_stats.weekly_expense
            )
        else:
            logger.warning(f"–û–¢–õ–ê–î–ö–ê: –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {previous_week_start} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            any_previous_stats = AvitoAccountWeeklyStats.objects.filter(
                avito_account_id=account_id,
                week_start_date__lt=current_week_start
            ).order_by('-week_start_date').first()
            
            if any_previous_stats:
                logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {any_previous_stats.week_start_date} - {any_previous_stats.week_end_date}")
                
                return WeeklySummary(
                    total_calls=any_previous_stats.total_calls,
                    answered_calls=any_previous_stats.answered_calls,
                    missed_calls=any_previous_stats.missed_calls,
                    total_chats=any_previous_stats.total_chats,
                    new_chats=any_previous_stats.new_chats,
                    phones_received=any_previous_stats.phones_received,
                    rating=any_previous_stats.rating,
                    total_reviews=any_previous_stats.total_reviews,
                    daily_reviews=any_previous_stats.weekly_reviews,
                    total_items=any_previous_stats.total_items,
                    xl_promotion_count=any_previous_stats.xl_promotion_count,
                    tools_subscription_count=any_previous_stats.tools_subscription_count,
                    views=any_previous_stats.views,
                    contacts=any_previous_stats.contacts,
                    favorites=any_previous_stats.favorites,
                    balance_real=any_previous_stats.balance_real,
                    balance_bonus=any_previous_stats.balance_bonus,
                    advance=any_previous_stats.advance,
                    daily_expense=any_previous_stats.weekly_expense
                )
            else:
                logger.warning(f"–û–¢–õ–ê–î–ö–ê: –í–æ–æ–±—â–µ –Ω–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –¥–Ω–µ–≤–Ω–æ–π (fallback)
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
                week_start = current_date - datetime.timedelta(days=14)
                week_end = current_date - datetime.timedelta(days=7)
                
                logger.info(f"–û–¢–õ–ê–î–ö–ê: Fallback - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å {week_start} –ø–æ {week_end}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                previous_week_daily_stats = AvitoAccountDailyStats.objects.filter(
                    avito_account_id=account_id,
                    date__gte=week_start,
                    date__lt=week_end
                )
                
                if previous_week_daily_stats.exists():
                    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {previous_week_daily_stats.count()} –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
                    
                    # –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    total_calls = sum(stats.total_calls for stats in previous_week_daily_stats)
                    answered_calls = sum(stats.answered_calls for stats in previous_week_daily_stats)
                    missed_calls = sum(stats.missed_calls for stats in previous_week_daily_stats)
                    total_chats = sum(stats.total_chats for stats in previous_week_daily_stats)
                    new_chats = sum(stats.new_chats for stats in previous_week_daily_stats)
                    phones_received = sum(stats.phones_received for stats in previous_week_daily_stats)
                    views = sum(stats.views for stats in previous_week_daily_stats)
                    contacts = sum(stats.contacts for stats in previous_week_daily_stats)
                    favorites = sum(stats.favorites for stats in previous_week_daily_stats)
                    daily_expense = sum(stats.daily_expense for stats in previous_week_daily_stats)
                    
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ —Å—É–º–º–∏—Ä—É–µ–º)
                    last_stat = previous_week_daily_stats.order_by('-date').first()
                    rating = last_stat.rating if last_stat else 0
                    total_reviews = last_stat.total_reviews if last_stat else 0
                    daily_reviews = sum(stats.daily_reviews for stats in previous_week_daily_stats)
                    total_items = last_stat.total_items if last_stat else 0
                    xl_promotion_count = last_stat.xl_promotion_count if last_stat else 0
                    tools_subscription_count = last_stat.tools_subscription_count if last_stat else 0
                    balance_real = last_stat.balance_real if last_stat else 0
                    balance_bonus = last_stat.balance_bonus if last_stat else 0
                    advance = last_stat.advance if last_stat else 0
                    
                    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∑–≤–æ–Ω–∫–∏: {total_calls}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}, –∫–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç WeeklySummary
                    return WeeklySummary(
                        total_calls=total_calls,
                        answered_calls=answered_calls,
                        missed_calls=missed_calls,
                        total_chats=total_chats,
                        new_chats=new_chats,
                        phones_received=phones_received,
                        rating=rating,
                        total_reviews=total_reviews,
                        daily_reviews=daily_reviews,
                        total_items=total_items,
                        xl_promotion_count=xl_promotion_count,
                        tools_subscription_count=tools_subscription_count,
                        views=views,
                        contacts=contacts,
                        favorites=favorites,
                        balance_real=balance_real,
                        balance_bonus=balance_bonus,
                        advance=advance,
                        daily_expense=daily_expense
                    )
                else:
                    logger.warning(f"–û–¢–õ–ê–î–ö–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é: {e}")
        return None

def daily_report_for_account(chat_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    loading_message = bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            today_date = datetime.datetime.strptime(response['date'], '%Y-%m-%d').date()
            store_account_daily_stats(account, today_date)
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today_date} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—á–µ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        bot.delete_message(chat_id, loading_message.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime.date
        today_date = datetime.datetime.strptime(response['date'], '%Y-%m-%d').date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        previous_stats = get_previous_day_stats(account_id, today_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        report_format = Settings.get_value("report_format", "new")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        if report_format == "new":
            message_text = format_daily_report_new(account, response, previous_stats)
        else:
            message_text = format_daily_report_standard(account, response, previous_stats)
        
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.delete_message(chat_id, loading_message.message_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            bot.delete_message(chat_id, loading_message.message_id)
        except:
            pass
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def weekly_report_for_account(chat_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    loading_message = bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            store_account_weekly_stats(account)
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        bot.delete_message(chat_id, loading_message.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        current_date = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
        previous_week_stats = get_previous_week_stats(account_id, current_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        report_format = Settings.get_value("report_format", "new")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        if report_format == "new":
            message_text = format_weekly_report_new(account, response, previous_week_stats)
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            message_text = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']} - {account.name}*\n\n"
            
            # –ó–≤–æ–Ω–∫–∏
            message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
            message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö: {response['calls']['total']}\n"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['calls']['total'], previous_week_stats.total_calls)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['calls']['answered'], previous_week_stats.answered_calls)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['calls']['missed'], previous_week_stats.missed_calls)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
            message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {response['chats']['total']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['chats']['total'], previous_week_stats.total_chats)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['phones_received'], previous_week_stats.phones_received)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
            message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
            message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
            message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
            message_text += f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {response['reviews']['weekly']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['reviews']['weekly'], previous_week_stats.daily_reviews)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –û–±—ä—è–≤–ª–µ–Ω–∏—è
            message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
            message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
            message_text += f"   ‚Ä¢ –° XL –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º: {response['items']['with_xl_promotion']}\n"
            message_text += f"   ‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {response['items']['with_tools_subscription']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['statistics']['views'], previous_week_stats.views)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['statistics']['contacts'], previous_week_stats.contacts)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['statistics']['favorites'], previous_week_stats.favorites)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –§–∏–Ω–∞–Ω—Å—ã
            message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
            message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
            message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
            message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
            
            message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:* "
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            expenses_message = format_expenses_message(response.get('expenses', {}))
            message_text += expenses_message
            
            if previous_week_stats and previous_week_stats.daily_expense > 0:
                percentage = calculate_percentage_change(account.weekly_expense, previous_week_stats.daily_expense)
                message_text += f"\n*–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {format_percentage_change(percentage)}*"
        
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.delete_message(chat_id, loading_message.message_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            bot.delete_message(chat_id, loading_message.message_id)
        except:
            pass
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def send_weekly_report(telegram_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –≤ Telegram –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        try:
            store_account_weekly_stats(account)
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        current_date = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
        previous_week_stats = get_previous_week_stats(account_id, current_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        report_format = Settings.get_value("report_format", "new")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        if report_format == "new":
            message_text = format_weekly_report_new(account, response, previous_week_stats)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            message_text = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']} - {account.name}*\n\n"
        
            # –ó–≤–æ–Ω–∫–∏
            message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
            message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö: {response['calls']['total']}\n"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['calls']['total'], previous_week_stats.total_calls)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['calls']['answered'], previous_week_stats.answered_calls)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['calls']['missed'], previous_week_stats.missed_calls)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –°–æ–æ–±—â–µ–Ω–∏—è
            message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
            message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {response['chats']['total']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['chats']['total'], previous_week_stats.total_chats)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['phones_received'], previous_week_stats.phones_received)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
            message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
            message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
            message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
            message_text += f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {response['reviews']['weekly']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['reviews']['weekly'], previous_week_stats.daily_reviews)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –û–±—ä—è–≤–ª–µ–Ω–∏—è
            message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
            message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
            message_text += f"   ‚Ä¢ –° XL –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º: {response['items']['with_xl_promotion']}\n"
            message_text += f"   ‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {response['items']['with_tools_subscription']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['statistics']['views'], previous_week_stats.views)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['statistics']['contacts'], previous_week_stats.contacts)
                message_text += f" {format_percentage_change(percentage)}\n"
            else:
                message_text += "\n"
                
            message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}"
            if previous_week_stats:
                percentage = calculate_percentage_change(response['statistics']['favorites'], previous_week_stats.favorites)
                message_text += f" {format_percentage_change(percentage)}\n\n"
            else:
                message_text += "\n\n"
            
            # –§–∏–Ω–∞–Ω—Å—ã
            message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
            message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
            message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
            message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
            
            message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:* "
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            expenses_message = format_expenses_message(response.get('expenses', {}))
            message_text += expenses_message
            
            if previous_week_stats and previous_week_stats.daily_expense > 0:
                percentage = calculate_percentage_change(account.weekly_expense, previous_week_stats.daily_expense)
                message_text += f"\n*–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {format_percentage_change(percentage)}*"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        bot.send_message(telegram_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        bot.send_message(telegram_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(telegram_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def send_daily_report(telegram_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –≤ Telegram –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        try:
            today_date = datetime.datetime.strptime(response['date'], '%Y-%m-%d').date()
            store_account_daily_stats(account, today_date)
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today_date} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime.date
        today_date = datetime.datetime.strptime(response['date'], '%Y-%m-%d').date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        previous_stats = get_previous_day_stats(account_id, today_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        report_format = Settings.get_value("report_format", "new")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
        if report_format == "new":
            message_text = format_daily_report_new(account, response, previous_stats)
        else:
            message_text = format_daily_report_standard(account, response, previous_stats)
        
        bot.send_message(telegram_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        bot.send_message(telegram_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(telegram_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def add_avito_account(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    from bot.handlers.registration import add_avito_account as register_new_account
    register_new_account(message)

def get_daily_reports_for_chat(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–∞—Ç–æ–º –ø–æ daily_report_tg_id"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID —á–∞—Ç–∞ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    accounts = AvitoAccount.objects.filter(
        models.Q(daily_report_tg_id=str(chat_id)) | models.Q(daily_report_tg_id=chat_id),
        client_id__isnull=False, 
        client_secret__isnull=False
    ).exclude(client_id="none").distinct()
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ chat_id={chat_id}: {accounts.count()}")
    
    if not accounts.exists():
        # –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω
        bot.send_message(chat_id, f"–ö –¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É (ID: {chat_id}) –Ω–µ –ø—Ä–∏–ª–∏–Ω–∫–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç. –£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç ID –≤ –ø–æ–ª–µ daily_report_tg_id –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
        return
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    for account in accounts:
        daily_report_for_account(chat_id, account.id)

def get_weekly_reports_for_chat(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–∞—Ç–æ–º –ø–æ weekly_report_tg_id"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID —á–∞—Ç–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    accounts = AvitoAccount.objects.filter(
        models.Q(weekly_report_tg_id=str(chat_id)) | models.Q(weekly_report_tg_id=chat_id),
        client_id__isnull=False, 
        client_secret__isnull=False
    ).exclude(client_id="none").distinct()
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ chat_id={chat_id}: {accounts.count()}")
    
    if not accounts.exists():
        # –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω
        bot.send_message(chat_id, f"–ö –¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É (ID: {chat_id}) –Ω–µ –ø—Ä–∏–ª–∏–Ω–∫–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç. –£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç ID –≤ –ø–æ–ª–µ weekly_report_tg_id –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
        return
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    for account in accounts:
        weekly_report_for_account(chat_id, account.id)

def get_historical_stats(account_id, days=7):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    
    Args:
        account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –¥–Ω—è–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        account = AvitoAccount.objects.get(id=account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = timezone.now().date()
        start_date = today - datetime.timedelta(days=days)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        stats = AvitoAccountDailyStats.objects.filter(
            avito_account=account,
            date__gte=start_date,
            date__lt=today
        ).order_by('date')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        if not stats.exists():
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            last_stats = AvitoAccountDailyStats.objects.filter(
                avito_account=account
            ).order_by('-date').first()
            
            if last_stats:
                logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π, –Ω–æ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ {last_stats.date} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}")
            else:
                logger.info(f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}")
            
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            return {}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        all_dates = []
        current_date = start_date
        while current_date < today:
            all_dates.append(current_date)
            current_date = current_date + datetime.timedelta(days=1)
            
        # –°–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å {–¥–∞—Ç–∞: –¥–∞–Ω–Ω—ã–µ} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        stats_by_date = {stat.date: stat for stat in stats}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "account_name": account.name,
            "period": f"{start_date} - {today - datetime.timedelta(days=1)}",
            "days_count": days,
            "days": [],
            "days_with_data": stats.count(),
            "days_missing": days - stats.count()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –¥–Ω—è–º –≤ –ø–µ—Ä–∏–æ–¥–µ
        # (–≤–∫–ª—é—á–∞—è –¥–Ω–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é)
        for date in all_dates:
            if date in stats_by_date:
                stat = stats_by_date[date]
                day_stats = {
                    "date": date.strftime("%Y-%m-%d"),
                    "has_data": True,
                    "calls": {
                        "total": stat.total_calls,
                        "answered": stat.answered_calls,
                        "missed": stat.missed_calls
                    },
                    "chats": {
                        "total": stat.total_chats,
                        "new": stat.new_chats
                    },
                    "phones_received": stat.phones_received,
                    "rating": stat.rating,
                    "reviews": {
                        "total": stat.total_reviews,
                        "daily": stat.daily_reviews
                    },
                    "items": {
                        "total": stat.total_items,
                        "with_xl_promotion": stat.xl_promotion_count,
                        "with_tools_subscription": stat.tools_subscription_count
                    },
                    "statistics": {
                        "views": stat.views,
                        "contacts": stat.contacts,
                        "favorites": stat.favorites
                    },
                    "finance": {
                        "balance_real": stat.balance_real,
                        "balance_bonus": stat.balance_bonus,
                        "advance": stat.advance,
                        "expense": stat.daily_expense
                    },
                    "expenses_details": stat.get_expenses_details()
                }
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
                day_stats = {
                    "date": date.strftime("%Y-%m-%d"),
                    "has_data": False
                }
            
            result["days"].append(day_stats)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        days_with_data = [day for day in result["days"] if day.get("has_data", False)]
        
        if days_with_data:
            total_stats = {
                "calls": {
                    "total": sum(day["calls"]["total"] for day in days_with_data),
                    "answered": sum(day["calls"]["answered"] for day in days_with_data),
                    "missed": sum(day["calls"]["missed"] for day in days_with_data)
                },
                "chats": {
                    "total": sum(day["chats"]["total"] for day in days_with_data)
                },
                "phones_received": sum(day["phones_received"] for day in days_with_data),
                "statistics": {
                    "views": sum(day["statistics"]["views"] for day in days_with_data),
                    "contacts": sum(day["statistics"]["contacts"] for day in days_with_data),
                    "favorites": sum(day["statistics"]["favorites"] for day in days_with_data)
                },
                "daily_reviews": sum(day["reviews"]["daily"] for day in days_with_data),
                "expenses": sum(day["finance"]["expense"] for day in days_with_data)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if result["days_with_data"] > 0:
                total_stats["daily_avg"] = {
                    "calls": round(total_stats["calls"]["total"] / result["days_with_data"], 1),
                    "views": round(total_stats["statistics"]["views"] / result["days_with_data"], 1),
                    "contacts": round(total_stats["statistics"]["contacts"] / result["days_with_data"], 1),
                    "expenses": round(total_stats["expenses"] / result["days_with_data"], 2)
                }
            
            result["total"] = total_stats
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name} –∑–∞ {days} –¥–Ω–µ–π")
        return result
        
    except AvitoAccount.DoesNotExist:
        logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

def format_historical_stats_message(stats_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        stats_data: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if not stats_data:
        return "üìä *–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥*"
    
    message = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {stats_data['period']} - {stats_data['account_name']}*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –¥–∞–Ω–Ω—ã–º–∏
    days_count = stats_data.get('days_count', 0)
    days_with_data = stats_data.get('days_with_data', 0)
    days_missing = stats_data.get('days_missing', 0)
    
    if days_missing > 0:
        coverage_percent = (days_with_data / days_count) * 100 if days_count > 0 else 0
        message += f"‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:* {days_with_data} –∏–∑ {days_count} –¥–Ω–µ–π ({coverage_percent:.1f}%)\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = stats_data.get('total', {})
    
    message += f"üìû *–ó–≤–æ–Ω–∫–∏ (–≤—Å–µ–≥–æ):*\n"
    message += f"   ‚Ä¢ –ù–æ–≤—ã—Ö: {total.get('calls', {}).get('total', 0)}\n"
    message += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {total.get('calls', {}).get('answered', 0)}\n"
    message += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total.get('calls', {}).get('missed', 0)}\n\n"
    
    message += f"üí¨ *–ß–∞—Ç—ã (–≤—Å–µ–≥–æ):* {total.get('chats', {}).get('total', 0)}\n"
    message += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤—Å–µ–≥–æ):* {total.get('phones_received', 0)}\n\n"
    
    message += f"üëç *–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:* {total.get('daily_reviews', 0)}\n\n"
    
    message += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã (–≤—Å–µ–≥–æ):* {total.get('statistics', {}).get('views', 0)}\n"
    message += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã (–≤—Å–µ–≥–æ):* {total.get('statistics', {}).get('contacts', 0)}\n"
    message += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º (–≤—Å–µ–≥–æ):* {total.get('statistics', {}).get('favorites', 0)}\n\n"
    
    message += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥:* {total.get('expenses', 0):.2f} ‚ÇΩ\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    daily_avg = total.get('daily_avg', {})
    if daily_avg:
        message += f"üìä *–°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
        message += f"   ‚Ä¢ –ó–≤–æ–Ω–∫–∏: {daily_avg.get('calls', 0)} –≤ –¥–µ–Ω—å\n"
        message += f"   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {daily_avg.get('views', 0)} –≤ –¥–µ–Ω—å\n"
        message += f"   ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {daily_avg.get('contacts', 0)} –≤ –¥–µ–Ω—å\n"
        message += f"   ‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {daily_avg.get('expenses', 0):.2f} ‚ÇΩ –≤ –¥–µ–Ω—å\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    message += f"üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:*\n"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    days_with_data = [day for day in stats_data.get('days', []) if day.get('has_data', False)]
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    max_days_in_details = 10
    days_to_show = days_with_data[-max_days_in_details:] if len(days_with_data) > max_days_in_details else days_with_data
    days_to_show = list(reversed(days_to_show))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if len(days_with_data) > max_days_in_details:
        message += f"_(–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_days_in_details} –¥–Ω–µ–π –∏–∑ {len(days_with_data)})_\n"
    
    for day in days_to_show:
        date = day.get('date', '')
        calls = day.get('calls', {}).get('total', 0)
        views = day.get('statistics', {}).get('views', 0)
        contacts = day.get('statistics', {}).get('contacts', 0)
        expense = day.get('finance', {}).get('expense', 0)
        
        message += f"\n*{date}*:\n"
        message += f"   ‚Ä¢ –ó–≤–æ–Ω–∫–∏: {calls}, –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}, –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n"
        message += f"   ‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {expense:.2f} ‚ÇΩ\n"
    
    return message

def format_daily_report_new(account, response, previous_stats):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        account: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ AvitoAccount
        response: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        previous_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å (–º–æ–¥–µ–ª—å AvitoAccountDailyStats) –∏–ª–∏ None
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}, previous_stats: {'–Ω–∞–π–¥–µ–Ω–∞' if previous_stats else '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_obj = datetime.datetime.strptime(response['date'], '%Y-%m-%d').date()
    formatted_date = date_obj.strftime('%d.%m.%Y')
    
    # –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
    message_text = f"> {account.name}:\n–û—Ç—á–µ—Ç –∑–∞ {formatted_date}\n\n"
    
    # –°–µ–∫—Ü–∏—è "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
    message_text += f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
    
    # –û–±—ä—è–≤–ª–µ–Ω–∏—è
    total_items = response['items']['total']
    percentage_items = 0
    if previous_stats:
        percentage_items = calculate_percentage_change(total_items, previous_stats.total_items)
    items_indicator = "‚ùóÔ∏è" if percentage_items < 0 else "‚úîÔ∏è"
    message_text += f"{items_indicator}–û–±—ä—è–≤–ª–µ–Ω–∏—è: {total_items} —à—Ç ({format_simple_percentage(percentage_items)})\n"
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
    views = response['statistics']['views']
    percentage_views = 0
    if previous_stats:
        percentage_views = calculate_percentage_change(views, previous_stats.views)
    views_indicator = "‚ùóÔ∏è" if percentage_views < 0 else "‚úîÔ∏è"
    message_text += f"{views_indicator}–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views} ({format_simple_percentage(percentage_views)})\n"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contacts = response['statistics']['contacts']
    percentage_contacts = 0
    if previous_stats:
        percentage_contacts = calculate_percentage_change(contacts, previous_stats.contacts)
    contacts_indicator = "‚ùóÔ∏è" if percentage_contacts < 0 else "‚úîÔ∏è"
    message_text += f"{contacts_indicator}–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts} ({format_simple_percentage(percentage_contacts)})\n"
    
    # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    conversion = 0
    percentage_conversion = 0
    if views > 0:
        conversion = (contacts / views) * 100
        if previous_stats and previous_stats.views > 0:
            prev_conversion = (previous_stats.contacts / previous_stats.views) * 100
            percentage_conversion = calculate_percentage_change(conversion, prev_conversion)
    conversion_indicator = "‚ùóÔ∏è" if percentage_conversion < 0 else "‚úîÔ∏è"
    message_text += f"{conversion_indicator}–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {conversion:.1f}% ({format_simple_percentage(percentage_conversion)})\n"
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_cost = 0
    percentage_contact_cost = 0
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    expenses_total = 0
    try:
        # –ï—Å–ª–∏ expenses - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º total, –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(response.get('expenses', {}), dict) and 'total' in response.get('expenses', {}):
            expenses_val = response.get('expenses', {}).get('total', 0)
            if isinstance(expenses_val, (int, float)):
                expenses_total = expenses_val
        # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º —Ä–∞—Å—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        else:
            expenses_total = getattr(account, 'daily_expense', 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        expenses_total = getattr(account, 'daily_expense', 0)
        
    if contacts > 0 and expenses_total > 0:
        contact_cost = (expenses_total / 100) / contacts  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        if previous_stats and previous_stats.contacts > 0 and previous_stats.daily_expense > 0:
            prev_contact_cost = previous_stats.daily_expense / previous_stats.contacts
            percentage_contact_cost = calculate_percentage_change(contact_cost, prev_contact_cost)
    # –î–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è: —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - —ç—Ç–æ –ø–ª–æ—Ö–æ
    cost_indicator = "‚ùóÔ∏è" if percentage_contact_cost > 0 else "‚úîÔ∏è"
    message_text += f"{cost_indicator}–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_cost:.0f} ‚ÇΩ ({format_simple_percentage(percentage_contact_cost)})\n"
    
    # –ó–≤–æ–Ω–∫–∏
    calls = response['calls']['total']
    percentage_calls = 0
    if previous_stats:
        percentage_calls = calculate_percentage_change(calls, previous_stats.total_calls)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ‚ùóÔ∏è –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
    call_indicator = "‚ùóÔ∏è" if percentage_calls < 0 else "‚úîÔ∏è"
    message_text += f"{call_indicator}–í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {calls} ({format_simple_percentage(percentage_calls)})\n\n"
    
    # –°–µ–∫—Ü–∏—è "–†–∞—Å—Ö–æ–¥—ã"
    message_text += f"–†–∞—Å—Ö–æ–¥—ã\n"
    
    # –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    percentage_expenses = 0
    if previous_stats and previous_stats.daily_expense > 0:
        percentage_expenses = calculate_percentage_change(expenses_total, previous_stats.daily_expense)
    message_text += f"–û–±—â–∏–µ: {expenses_total / 100:.1f} ‚ÇΩ ({format_simple_percentage(percentage_expenses)})\n"
    
    # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ (promo)
    promo_expense = response['expenses']['details'].get('promo', {}).get('amount', 0) / 100
    percentage_promo = 0
    message_text += f"–ù–∞ —Ü–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {promo_expense:.1f} ‚ÇΩ ({format_simple_percentage(percentage_promo)})\n"
    
    # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ XL –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (presence)
    xl_expense = response['expenses']['details'].get('presence', {}).get('amount', 0) / 100
    percentage_xl = 0
    message_text += f"–ù–∞ XL –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: {xl_expense:.1f} ‚ÇΩ ({format_simple_percentage(percentage_xl)})\n"
    
    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–∏–¥–æ–∫
    discount_expense = response['expenses']['details'].get('sales', {}).get('amount', 0) / 100
    percentage_discount = 0
    message_text += f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–∏–¥–æ–∫: {discount_expense:.0f} ‚ÇΩ ({format_simple_percentage(percentage_discount)})\n"
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools_subscription_count = response['items']['with_tools_subscription']
    percentage_tools = 0
    if previous_stats:
        percentage_tools = calculate_percentage_change(tools_subscription_count, previous_stats.tools_subscription_count)
    message_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools_subscription_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({format_simple_percentage(percentage_tools)})\n\n"
    
    # –†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    message_text += f"–†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
    
    # –ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–≤–æ–Ω–∫–∏
    missed_calls = response['calls']['missed']
    message_text += f"–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–≤–æ–Ω–∫–∏: {missed_calls}\n"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (–æ—Ü–µ–Ω–∫–∞)
    unanswered_messages = 0
    if isinstance(response.get('chats', {}), dict):
        unanswered_messages = response.get('chats', {}).get('unanswered', 0)
    message_text += f"–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {unanswered_messages}\n"
    
    # –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
    new_reviews = response['reviews']['today']
    message_text += f"–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã: {new_reviews}\n\n"
    
    # –ë–∞–ª–∞–Ω—Å—ã
    message_text += f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    message_text += f"CPA –±–∞–ª–∞–Ω—Å: {response['cpa_balance']:.2f} ‚ÇΩ\n"
    
    # –ö–æ—à–µ–ª–µ–∫ (—Å—É–º–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –±–æ–Ω—É—Å–æ–≤)
    wallet = response['balance_real'] + response['balance_bonus']
    message_text += f"–ö–æ—à–µ–ª–µ–∫: {wallet:.0f} ‚ÇΩ"
    
    return message_text

def format_simple_percentage(percentage):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–µ +X% –∏–ª–∏ -X%
    
    Args:
        percentage: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
    """
    if percentage > 0:
        return f"+{percentage:.1f}%"
    elif percentage < 0:
        return f"{percentage:.1f}%"
    else:
        return "0.0%"

def toggle_report_format(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    try:
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            user = User.objects.get(telegram_id=str(message.from_user.id))
        except User.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="report_format_new"),
            telebot.types.InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="report_format_standard")
        )
        
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
def handle_report_format_selection(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –∏–∑ inline-–∫–Ω–æ–ø–æ–∫"""
    chat_id = call.message.chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º chat_id
        users = User.objects.filter(telegram_id=str(call.from_user.id))
        
        if not users.exists():
            bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if call.data == "report_format_new":
            Settings.set_value(
                key="report_format", 
                value="new",
                description="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–æ–≤ (new/standard)"
            )
            bot.answer_callback_query(call.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞")
            bot.edit_message_text(
                "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞",
                chat_id,
                call.message.message_id,
                reply_markup=None
            )
        else:
            Settings.set_value(
                key="report_format", 
                value="standard",
                description="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–æ–≤ (new/standard)"
            )
            bot.answer_callback_query(call.id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞")
            bot.edit_message_text(
                "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞",
                chat_id,
                call.message.message_id,
                reply_markup=None
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def format_daily_report_standard(account, response, previous_stats):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        account: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ AvitoAccount
        response: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        previous_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å (–º–æ–¥–µ–ª—å AvitoAccountDailyStats) –∏–ª–∏ None
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {response['date']} - {account.name}*\n\n"
    
    # –ó–≤–æ–Ω–∫–∏
    message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
    message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö: {response['calls']['total']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['calls']['total'], previous_stats.total_calls)
        message_text += f" {format_percentage_change(percentage)}\n"
    else:
        message_text += "\n"
        
    message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['calls']['answered'], previous_stats.answered_calls)
        message_text += f" {format_percentage_change(percentage)}\n"
    else:
        message_text += "\n"
        
    message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['calls']['missed'], previous_stats.missed_calls)
        message_text += f" {format_percentage_change(percentage)}\n\n"
    else:
        message_text += "\n\n"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
    message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {response['chats']['total']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['chats']['total'], previous_stats.total_chats)
        message_text += f" {format_percentage_change(percentage)}\n"
    else:
        message_text += "\n"
        
    message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['phones_received'], previous_stats.phones_received)
        message_text += f" {format_percentage_change(percentage)}\n\n"
    else:
        message_text += "\n\n"
    
    # –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
    message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
    message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
    message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
    message_text += f"   ‚Ä¢ –ó–∞ –¥–µ–Ω—å: {response['reviews']['today']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['reviews']['today'], previous_stats.daily_reviews)
        message_text += f" {format_percentage_change(percentage)}\n\n"
    else:
        message_text += "\n\n"
    
    # –û–±—ä—è–≤–ª–µ–Ω–∏—è
    message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
    message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
    message_text += f"   ‚Ä¢ –° XL –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º: {response['items']['with_xl_promotion']}\n"
    message_text += f"   ‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {response['items']['with_tools_subscription']}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['statistics']['views'], previous_stats.views)
        message_text += f" {format_percentage_change(percentage)}\n"
    else:
        message_text += "\n"
        
    message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['statistics']['contacts'], previous_stats.contacts)
        message_text += f" {format_percentage_change(percentage)}\n"
    else:
        message_text += "\n"
        
    message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}"
    if previous_stats:
        percentage = calculate_percentage_change(response['statistics']['favorites'], previous_stats.favorites)
        message_text += f" {format_percentage_change(percentage)}\n\n"
    else:
        message_text += "\n\n"
    
    # –§–∏–Ω–∞–Ω—Å—ã
    message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
    message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
    message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
    message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
    
    message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:* "
    expenses_message = format_expenses_message(response.get('expenses', {}))
    message_text += expenses_message
    
    if previous_stats and previous_stats.daily_expense > 0:
        percentage = calculate_percentage_change(account.daily_expense, previous_stats.daily_expense)
        message_text += f"\n*–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {format_percentage_change(percentage)}*"
    
    # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ü–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    promo_expense = response['expenses']['details'].get('presence', {}).get('amount', 0) / 100
    percentage_promo = 0
    message_text += f"–ù–∞ —Ü–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {promo_expense:,} ‚ÇΩ ({format_simple_percentage(percentage_promo)})\n".replace(',', ' ')
    
    return message_text

def format_weekly_report_new(account, response, previous_stats):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        account: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ AvitoAccount
        response: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        previous_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é (–æ–±—ä–µ–∫—Ç —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏) –∏–ª–∏ None
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.name}, previous_stats: {'–Ω–∞–π–¥–µ–Ω–∞' if previous_stats else '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}")
    
    # –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–æ–º
    message_text = f"> {account.name}:\n–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']}\n\n"
    
    # –°–µ–∫—Ü–∏—è "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
    message_text += f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
    
    # –û–±—ä—è–≤–ª–µ–Ω–∏—è
    total_items = response['items']['total']
    percentage_items = 0
    if previous_stats:
        percentage_items = calculate_percentage_change(total_items, previous_stats.total_items)
    items_indicator = "‚ùóÔ∏è" if percentage_items < 0 else "‚úîÔ∏è"
    message_text += f"{items_indicator}–û–±—ä—è–≤–ª–µ–Ω–∏—è: {total_items} —à—Ç ({format_simple_percentage(percentage_items)})\n"
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
    views = response['statistics']['views']
    percentage_views = 0
    if previous_stats:
        percentage_views = calculate_percentage_change(views, previous_stats.views)
    views_indicator = "‚ùóÔ∏è" if percentage_views < 0 else "‚úîÔ∏è"
    message_text += f"{views_indicator}–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views} ({format_simple_percentage(percentage_views)})\n"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contacts = response['statistics']['contacts']
    percentage_contacts = 0
    if previous_stats:
        percentage_contacts = calculate_percentage_change(contacts, previous_stats.contacts)
    contacts_indicator = "‚ùóÔ∏è" if percentage_contacts < 0 else "‚úîÔ∏è"
    message_text += f"{contacts_indicator}–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts} ({format_simple_percentage(percentage_contacts)})\n"
    
    # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    conversion = 0
    percentage_conversion = 0
    if views > 0:
        conversion = (contacts / views) * 100
        if previous_stats and previous_stats.views > 0:
            prev_conversion = (previous_stats.contacts / previous_stats.views) * 100
            percentage_conversion = calculate_percentage_change(conversion, prev_conversion)
    conversion_indicator = "‚ùóÔ∏è" if percentage_conversion < 0 else "‚úîÔ∏è"
    message_text += f"{conversion_indicator}–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {conversion:.1f}% ({format_simple_percentage(percentage_conversion)})\n"
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_cost = 0
    percentage_contact_cost = 0
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    expenses_total = 0
    try:
        # –ï—Å–ª–∏ expenses - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º total, –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(response.get('expenses', {}), dict) and 'total' in response.get('expenses', {}):
            expenses_val = response.get('expenses', {}).get('total', 0)
            if isinstance(expenses_val, (int, float)):
                expenses_total = expenses_val
        # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º —Ä–∞—Å—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        else:
            expenses_total = getattr(account, 'weekly_expense', 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        expenses_total = getattr(account, 'weekly_expense', 0)
        
    if contacts > 0 and expenses_total > 0:
        contact_cost = (expenses_total / 100) / contacts  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
        if previous_stats and previous_stats.contacts > 0 and previous_stats.daily_expense > 0:
            prev_contact_cost = previous_stats.daily_expense / previous_stats.contacts
            percentage_contact_cost = calculate_percentage_change(contact_cost, prev_contact_cost)
    # –î–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è: —Ä–æ—Å—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - —ç—Ç–æ –ø–ª–æ—Ö–æ
    cost_indicator = "‚ùóÔ∏è" if percentage_contact_cost > 0 else "‚úîÔ∏è"
    message_text += f"{cost_indicator}–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_cost:.0f} ‚ÇΩ ({format_simple_percentage(percentage_contact_cost)})\n"
    
    # –ó–≤–æ–Ω–∫–∏ (–≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ)
    calls = response['calls']['total']
    percentage_calls = 0
    if previous_stats:
        percentage_calls = calculate_percentage_change(calls, previous_stats.total_calls)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ‚ùóÔ∏è –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
    call_indicator = "‚ùóÔ∏è" if percentage_calls < 0 else "‚úîÔ∏è"
    message_text += f"{call_indicator}–í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {calls} ({format_simple_percentage(percentage_calls)})\n\n"
    
    # –°–µ–∫—Ü–∏—è "–†–∞—Å—Ö–æ–¥—ã"
    message_text += f"–†–∞—Å—Ö–æ–¥—ã\n"
    
    # –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    percentage_expenses = 0
    if previous_stats and previous_stats.daily_expense > 0:
        percentage_expenses = calculate_percentage_change(expenses_total, previous_stats.daily_expense)
    message_text += f"–û–±—â–∏–µ: {expenses_total / 100:.1f} ‚ÇΩ ({format_simple_percentage(percentage_expenses)})\n"
    
    # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ (promo)
    promo_expense = response['expenses']['details'].get('promo', {}).get('amount', 0) / 100
    percentage_promo = 0
    message_text += f"–ù–∞ —Ü–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {promo_expense:.1f} ‚ÇΩ ({format_simple_percentage(percentage_promo)})\n"
    
    # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ XL –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (presence)
    xl_expense = response['expenses']['details'].get('presence', {}).get('amount', 0) / 100
    percentage_xl = 0
    message_text += f"–ù–∞ XL –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: {xl_expense:.1f} ‚ÇΩ ({format_simple_percentage(percentage_xl)})\n"
    
    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–∏–¥–æ–∫
    discount_expense = response['expenses']['details'].get('sales', {}).get('amount', 0) / 100
    percentage_discount = 0
    message_text += f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–∏–¥–æ–∫: {discount_expense:.0f} ‚ÇΩ ({format_simple_percentage(percentage_discount)})\n"
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    tools_subscription_count = response['items']['with_tools_subscription']
    percentage_tools = 0
    if previous_stats:
        percentage_tools = calculate_percentage_change(tools_subscription_count, previous_stats.tools_subscription_count)
    message_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools_subscription_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π ({format_simple_percentage(percentage_tools)})\n\n"
    
    # –†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    message_text += f"–†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
    
    # –ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–≤–æ–Ω–∫–∏
    missed_calls = response['calls']['missed']
    message_text += f"–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–≤–æ–Ω–∫–∏: {missed_calls}\n"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (–æ—Ü–µ–Ω–∫–∞)
    unanswered_messages = 0
    if isinstance(response.get('chats', {}), dict):
        unanswered_messages = response.get('chats', {}).get('unanswered', 0)
    message_text += f"–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {unanswered_messages}\n"
    
    # –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    new_reviews = response['reviews']['weekly']
    message_text += f"–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã: {new_reviews}\n\n"
    
    # –ë–∞–ª–∞–Ω—Å—ã
    message_text += f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    message_text += f"CPA –±–∞–ª–∞–Ω—Å: {response['cpa_balance']:.2f} ‚ÇΩ\n"
    
    # –ö–æ—à–µ–ª–µ–∫ (—Å—É–º–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –±–æ–Ω—É—Å–æ–≤)
    wallet = response['balance_real'] + response['balance_bonus']
    message_text += f"–ö–æ—à–µ–ª–µ–∫: {wallet:.0f} ‚ÇΩ"
    
    return message_text
