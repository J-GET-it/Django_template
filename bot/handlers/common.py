from bot import bot
from bot.models import User, AvitoAccount, UserAvitoAccount
from bot.keyboards import main_markup
from bot.texts import MAIN_TEXT
from bot.services import get_daily_statistics, get_weekly_statistics
import telebot
from django.db import models

import logging

logger = logging.getLogger(__name__)

def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from bot.handlers.registration import start_registration
    start_registration(message)

def menu_m(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    bot.send_message(
        chat_id=chat_id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def format_expenses_message(expenses):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    if not expenses:
        return "0.00 ‚ÇΩ"
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not isinstance(expenses, dict):
        return "0.00 ‚ÇΩ"
        
    total = expenses.get('total', 0)
    details = expenses.get('details', {})
    
    if total <= 0:
        return "0.00 ‚ÇΩ"
    
    message = f"{total:.2f} ‚ÇΩ\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if details:
        message += f"üìã *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
        sorted_details = sorted(
            details.items(), 
            key=lambda x: x[1]['amount'], 
            reverse=True
        )
        
        for service, service_details in sorted_details:
            amount = service_details.get('amount', 0)
            count = service_details.get('count', 1)
            items = service_details.get('items', [])
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            items_count = len(items) if items else 0
            items_suffix = ""
            if items_count > 0:
                items_suffix = f" ({items_count} –æ–±—ä—è–≤–ª.)"
            
            message += f"   ‚Ä¢ {service}{items_suffix}: {amount:.2f} ‚ÇΩ ({count} –æ–ø–µ—Ä.)\n"
    
    return message

def select_avito_account(chat_id, user_id, callback_prefix):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û–¢–õ–ê–î–ö–ê: select_avito_account –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, chat_id: {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.filter(telegram_id=user_id).first()
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        
        if not user:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ê–≤–∏—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ
        accounts = AvitoAccount.objects.filter(
            client_id__isnull=False,
            client_secret__isnull=False
        ).exclude(client_id="none").distinct()
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ: {accounts.count()}")
        
        if not accounts.exists():
            bot.send_message(chat_id, "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ")
            logger.error(f"–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
        if accounts.count() == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            account_id = accounts.first().id
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
            if callback_prefix == "daily_report":
                daily_report_for_account(chat_id, account_id)
            else:
                weekly_report_for_account(chat_id, account_id)
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        for account in accounts:
            button = telebot.types.InlineKeyboardButton(
                text=account.name,
                callback_data=f"{callback_prefix}_{account.id}"
            )
            markup.add(button)
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {account.name}, callback_data: {callback_prefix}_{account.id}")
            
        bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=markup
        )
    except User.DoesNotExist:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def daily_report(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: daily_report –≤—ã–∑–≤–∞–Ω, user_id: {user_id}, chat_id: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    parts = call.data.split("_")
    if len(parts) > 2 and parts[0] == "daily" and parts[1] == "report":
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç daily_report_ID, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            account_id = int(parts[2])
            daily_report_for_account(chat_id, account_id)
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        select_avito_account(chat_id, user_id, "daily_report")

def weekly_report(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: weekly_report –≤—ã–∑–≤–∞–Ω, user_id: {user_id}, chat_id: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    parts = call.data.split("_")
    if len(parts) > 2 and parts[0] == "weekly" and parts[1] == "report":
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç weekly_report_ID, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            account_id = int(parts[2])
            weekly_report_for_account(chat_id, account_id)
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        select_avito_account(chat_id, user_id, "weekly_report")

def daily_report_for_account(chat_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    loading_message = bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        bot.delete_message(chat_id, loading_message.message_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {response['date']} - {account.name}*\n\n"
        message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['calls']['total']}\n"
        message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}\n"
        message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}\n\n"
        
        message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {response['chats']['total']}\n"
        message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}\n\n"
        
        message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
        message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
        message_text += f"   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {response['reviews']['today']}\n\n"
        
        message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
        
        message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}\n"
        message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}\n"
        message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}\n\n"
        
        message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
        message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
        
        message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        expenses_message = format_expenses_message(response.get('expenses', {}))
        message_text += expenses_message
        
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.delete_message(chat_id, loading_message.message_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            bot.delete_message(chat_id, loading_message.message_id)
        except:
            pass
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def weekly_report_for_account(chat_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    loading_message = bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        bot.delete_message(chat_id, loading_message.message_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']} - {account.name}*\n\n"
        message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['calls']['total']}\n"
        message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}\n"
        message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}\n\n"
        
        message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {response['chats']['total']}\n"
        message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}\n\n"
        
        message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
        message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
        message_text += f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {response['reviews']['weekly']}\n\n"
        
        message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        
        message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}\n"
        message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}\n"
        message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}\n\n"
        
        message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
        message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
        
        message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:* "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        expenses_message = format_expenses_message(response.get('expenses', {}))
        message_text += expenses_message
        
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.delete_message(chat_id, loading_message.message_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            bot.delete_message(chat_id, loading_message.message_id)
        except:
            pass
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def send_daily_report(telegram_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –≤ Telegram –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {response['date']} - {account.name}*\n\n"
        message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['calls']['total']}\n"
        message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}\n"
        message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}\n\n"
        
        message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {response['chats']['total']}\n"
        message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}\n\n"
        
        message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
        message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
        message_text += f"   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {response['reviews']['today']}\n\n"
        
        message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
        
        message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}\n"
        message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}\n"
        message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}\n\n"
        
        message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
        message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
        
        message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        expenses_message = format_expenses_message(response.get('expenses', {}))
        message_text += expenses_message

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        bot.send_message(telegram_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def send_weekly_report(telegram_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –≤ Telegram –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']} - {account.name}*\n\n"
        message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['calls']['total']}\n"
        message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}\n"
        message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}\n\n"
        
        message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {response['chats']['total']}\n"
        message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}\n\n"
        
        message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
        message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
        message_text += f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {response['reviews']['weekly']}\n\n"
        
        message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        
        message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}\n"
        message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}\n"
        message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}\n\n"
        
        message_text += f"üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
        message_text += f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {response['balance_real']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ë–æ–Ω—É—Å—ã: {response['balance_bonus']} ‚ÇΩ\n"
        message_text += f"   ‚Ä¢ –ê–≤–∞–Ω—Å: {response['advance']} ‚ÇΩ\n\n"
        
        message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:* "
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        expenses_message = format_expenses_message(response.get('expenses', {}))
        message_text += expenses_message

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        bot.send_message(telegram_id, message_text, parse_mode="Markdown")
        
    except AvitoAccount.DoesNotExist:
        logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def add_avito_account(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    from bot.handlers.registration import add_avito_account as register_new_account
    register_new_account(message)
