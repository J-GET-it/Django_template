from bot import bot
from bot.models import User, ItemData
from bot.keyboards import main_markup
from bot.texts import MAIN_TEXT
from bot.services import get_daily_statistics, get_weekly_statistics

import logging
import pandas as pd
import os
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from bot.handlers.registration import start_registration
    start_registration(message)

def menu_m(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    bot.send_message(
        chat_id=chat_id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def daily_report(call):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        user = User.objects.get(telegram_id=user_id)
        client_id = user.client_id
        client_secret = user.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {response['date']}*\n\n"
        message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['calls']['total']}\n"
        message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}\n"
        message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}\n\n"
        
        message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:* {response['chats']}\n"
        message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}\n\n"
        
        message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
        message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
        message_text += f"   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {response['reviews']['today']}\n\n"
        
        message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
        
        message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}\n"
        message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}\n"
        message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}\n\n"
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        total_expense = calculate_expenses(user, response['statistics']['views'])
        if total_expense > 0:
            message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã:* {total_expense:.2f} ‚ÇΩ\n\n"
        
        message_text += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {response['balance']} ‚ÇΩ"
        
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        
    except User.DoesNotExist:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def weekly_report(call):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        user = User.objects.get(telegram_id=user_id)
        client_id = user.client_id
        client_secret = user.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']}*\n\n"
        message_text += f"üìû *–ó–≤–æ–Ω–∫–∏:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['calls']['total']}\n"
        message_text += f"   ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {response['calls']['answered']}\n"
        message_text += f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {response['calls']['missed']}\n\n"
        
        message_text += f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:* {response['chats']}\n"
        message_text += f"üì± *–ü–æ–∫–∞–∑–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {response['phones_received']}\n\n"
        
        message_text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {response['rating']}\n"
        message_text += f"üëç *–û—Ç–∑—ã–≤—ã:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['reviews']['total']}\n"
        message_text += f"   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {response['reviews']['weekly']}\n\n"
        
        message_text += f"üìù *–û–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        message_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {response['items']['total']}\n"
        
        message_text += f"üëÅ *–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:* {response['statistics']['views']}\n"
        message_text += f"üì≤ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {response['statistics']['contacts']}\n"
        message_text += f"‚ù§Ô∏è *–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º:* {response['statistics']['favorites']}\n\n"
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        total_expense = calculate_expenses(user, response['statistics']['views'])
        if total_expense > 0:
            message_text += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã:* {total_expense:.2f} ‚ÇΩ\n\n"
        
        message_text += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {response['balance']} ‚ÇΩ"
        
        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        
    except User.DoesNotExist:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def calculate_expenses(user, total_views):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    item_data_records = ItemData.objects.filter(user=user)
    
    if not item_data_records.exists() or total_views <= 0:
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
    valid_items = [item for item in item_data_records if item.view_price > 0]
    
    if not valid_items:
        return 0
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    item_count = len(valid_items)
    views_per_item = total_views / item_count if item_count > 0 else 0
    
    total_expense = 0
    for item_data in valid_items:
        total_expense += views_per_item * item_data.view_price
    
    return total_expense

def request_item_data_file(call):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–π–ª XLS —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö"""
    chat_id = call.message.chat.id
    
    msg = bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ XLS —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö.\n\n"
        "–í —Å—Ç–æ–ª–±—Ü–µ A –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∞ –≤ —Å—Ç–æ–ª–±—Ü–µ P - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
        parse_mode="Markdown"
    )
    
    bot.register_next_step_handler(msg, process_item_data_file)

def process_item_data_file(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π XLS —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    try:
        user = User.objects.get(telegram_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª
        if not message.document:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ XLS —Ñ–∞–π–ª.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_info = bot.get_file(message.document.file_id)
        file_extension = os.path.splitext(message.document.file_name)[1].lower()
        
        if file_extension not in ['.xls', '.xlsx']:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLS –∏–ª–∏ XLSX.")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        temp_file_path = f"temp_{message.document.file_id}{file_extension}"
        with open(temp_file_path, 'wb') as temp_file:
            temp_file.write(downloaded_file)
        
        bot.send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é pandas
        df = pd.read_excel(temp_file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if 'A' not in df.columns or 'P' not in df.columns:
            if len(df.columns) > 0 and len(df.columns) > 15:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - A, –∞ 16-–π —Å—Ç–æ–ª–±–µ—Ü - P (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0)
                item_id_column = df.columns[0]
                price_column = df.columns[15]
            else:
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤ —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã A –∏ P.")
                os.remove(temp_file_path)
                return
        else:
            item_id_column = 'A'
            price_column = 'P'
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ItemData.objects.filter(user=user).delete()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        added_count = 0
        skipped_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for _, row in df.iterrows():
            item_id = str(row[item_id_column]).strip()
            try:
                price = float(row[price_column])
            except (ValueError, TypeError):
                price = 0
            
            if item_id and price > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_or_create –≤–º–µ—Å—Ç–æ create –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                ItemData.objects.update_or_create(
                    user=user,
                    item_id=item_id,
                    defaults={'view_price': price}
                )
                added_count += 1
            else:
                skipped_count += 1
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)
        
        bot.send_message(
            chat_id,
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {added_count}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ü–µ–Ω–∞ = 0): {skipped_count}",
            parse_mode="Markdown"
        )
        
    except User.DoesNotExist:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'temp_file_path' in locals():
                os.remove(temp_file_path)
        except:
            pass
