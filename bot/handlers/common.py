from bot import bot
from bot.models import User
from bot.keyboards import main_markup
from bot.texts import MAIN_TEXT
from bot.services import AvitoApiService

import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

def menu_m(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    bot.send_message(
        chat_id=chat_id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def profile(call):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç—å Client Secret"""
    user_id = call.from_user.id
    try:
        user = User.objects.get(telegram_id=user_id)
        
        # –ï—Å–ª–∏ client_secret –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ none
        if not user.client_secret or user.client_secret == "none":
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_update).add(btn_back)
            
            bot.send_message(
                user_id, 
                "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Client Secret –ê–≤–∏—Ç–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
                reply_markup=markup
            )
            return
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ API, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å client_secret
        api_service = AvitoApiService(user.client_id, user.client_secret)
        profile_data = api_service.get_user_profile()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è client_secret
        markup = InlineKeyboardMarkup()
        btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
        btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn_update).add(btn_back)
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if "error" in profile_data:
            error_message = profile_data["error"]
            detailed_message = "–ù–µ–≤–µ—Ä–Ω—ã–π Client Secret" if "token" in error_message.lower() else error_message
            
            bot.send_message(
                user_id, 
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {detailed_message}\n\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π Client Secret: `{user.client_secret[:5]}...{user.client_secret[-5:]}`\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Client Secret, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=markup,
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_text = "üìã –ü—Ä–æ—Ñ–∏–ª—å –ê–≤–∏—Ç–æ\n\n"
        profile_text += f"üë§ –ò–º—è: {profile_data.get('name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        profile_text += f"üìß Email: {profile_data.get('email', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile_data.get('phone', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        profile_text += f"üÜî ID: {profile_data.get('id', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
        profile_text += f"üîë Client Secret: `{user.client_secret[:5]}...{user.client_secret[-5:]}`"
        
        bot.send_message(user_id, profile_text, reply_markup=markup, parse_mode="Markdown")
    except User.DoesNotExist:
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def update_api_key(call):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Client Secret –ê–≤–∏—Ç–æ"""
    user_id = call.from_user.id
    try:
        user = User.objects.get(telegram_id=user_id)
        mesg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ Client ID –∏ Client Secret –ê–≤–∏—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (—Å–Ω–∞—á–∞–ª–∞ Client ID, –∑–∞—Ç–µ–º Client Secret):")
        bot.register_next_step_handler(mesg, save_new_api_key)
    except User.DoesNotExist:
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Client Secret: {e}")
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def save_new_api_key(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Client Secret"""
    user_id = message.from_user.id
    try:
        credentials = message.text.strip().split()
        
        if len(credentials) != 2:
            markup = InlineKeyboardMarkup()
            btn_try_again = InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_try_again).add(btn_back)
            
            bot.send_message(
                user_id, 
                "‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ Client ID –∏ Client Secret —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
                reply_markup=markup
            )
            return
        
        client_id, new_client_secret = credentials
        user = User.objects.get(telegram_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å client_id –∏ client_secret –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        api_service = AvitoApiService(client_id=client_id, client_secret=new_client_secret)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        token = api_service.get_access_token()
        if not token:
            markup = InlineKeyboardMarkup()
            btn_try_again = InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_try_again).add(btn_back)
            
            bot.send_message(
                user_id, 
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Client ID –∏ Client Secret.",
                reply_markup=markup
            )
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_data = api_service.get_user_profile()
        
        if "error" in profile_data:
            error_message = profile_data["error"]
            detailed_message = "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞" if "token" in error_message.lower() else error_message
            
            markup = InlineKeyboardMarkup()
            btn_try_again = InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_try_again).add(btn_back)
            
            bot.send_message(
                user_id, 
                f"‚ùå –û—à–∏–±–∫–∞: {detailed_message}\n\n–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=markup
            )
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º client_id –∏ client_secret
        user.client_id = client_id
        user.client_secret = new_client_secret
        user.save()
        
        user_name = profile_data.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        bot.send_message(
            user_id, 
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ê–≤–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            reply_markup=main_markup
        )
    except User.DoesNotExist:
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def back_to_menu(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = call.from_user.id
    menu_message = {
        'chat': {'id': user_id},
        'from_user': {'id': user_id}
    }
    menu_m(menu_message)

def daily_report(call):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ –¥–µ–Ω—å"""
    user_id = call.from_user.id
    try:
        user = User.objects.get(telegram_id=user_id)
        
        if not user.client_secret or user.client_secret == "none":
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_update).add(btn_back)
            
            bot.send_message(
                user_id, 
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Client Secret –ê–≤–∏—Ç–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
                reply_markup=markup
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
        wait_message = bot.send_message(user_id, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        api_service = AvitoApiService(user.client_id, user.client_secret)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        token = api_service.get_access_token()
        if not token:
            bot.delete_message(user_id, wait_message.message_id)
            
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_update).add(btn_back)
            
            bot.send_message(
                user_id, 
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Client Secret.",
                reply_markup=markup
            )
            return
        
        daily_stats = api_service.get_daily_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
        has_error = False
        error_details = []
        
        for section_key in ['current', 'previous']:
            if section_key in daily_stats:
                data_section = daily_stats[section_key]
                for data_key, data_value in data_section.items():
                    if isinstance(data_value, dict) and "error" in data_value:
                        has_error = True
                        error_message = data_value["error"]
                        error_details.append(f"{data_key}: {error_message}")
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {data_key}: {error_message}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if has_error:
            bot.delete_message(user_id, wait_message.message_id)
            
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_retry = InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="daily_report")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_retry).add(btn_update).add(btn_back)
            
            err_msg = "\n".join(error_details[:3]) if error_details else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API"
            
            bot.send_message(
                user_id, 
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API –ê–≤–∏—Ç–æ:\n\n"
                f"{err_msg}\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π Client Secret\n"
                "- –°–µ—Ä–≤–µ—Ä –ê–≤–∏—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Client Secret –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
                reply_markup=markup
            )
            return
        
        formatted_stats = api_service.format_daily_stats(daily_stats)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        bot.delete_message(user_id, wait_message.message_id)
        
        bot.send_message(user_id, formatted_stats, reply_markup=main_markup)
    except User.DoesNotExist:
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def weekly_report(call):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    user_id = call.from_user.id
    try:
        user = User.objects.get(telegram_id=user_id)
        
        if not user.client_secret or user.client_secret == "none":
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_update).add(btn_back)
            
            bot.send_message(
                user_id, 
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Client Secret –ê–≤–∏—Ç–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
                reply_markup=markup
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
        wait_message = bot.send_message(user_id, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        api_service = AvitoApiService(user.client_id, user.client_secret)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        token = api_service.get_access_token()
        if not token:
            bot.delete_message(user_id, wait_message.message_id)
            
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_update).add(btn_back)
            
            bot.send_message(
                user_id, 
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Client Secret.",
                reply_markup=markup
            )
            return
        
        weekly_stats = api_service.get_weekly_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
        has_error = False
        error_details = []
        
        for section_key in ['current', 'previous']:
            if section_key in weekly_stats:
                data_section = weekly_stats[section_key]
                for data_key, data_value in data_section.items():
                    if isinstance(data_value, dict) and "error" in data_value:
                        has_error = True
                        error_message = data_value["error"]
                        error_details.append(f"{data_key}: {error_message}")
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {data_key}: {error_message}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if has_error:
            bot.delete_message(user_id, wait_message.message_id)
            
            markup = InlineKeyboardMarkup()
            btn_update = InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å Client Secret", callback_data="update_api_key")
            btn_retry = InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="weekly_report")
            btn_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
            markup.add(btn_retry).add(btn_update).add(btn_back)
            
            err_msg = "\n".join(error_details[:3]) if error_details else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API"
            
            bot.send_message(
                user_id, 
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API –ê–≤–∏—Ç–æ:\n\n"
                f"{err_msg}\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π Client Secret\n"
                "- –°–µ—Ä–≤–µ—Ä –ê–≤–∏—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Client Secret –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
                reply_markup=markup
            )
            return
        
        formatted_stats = api_service.format_weekly_stats(weekly_stats)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        bot.delete_message(user_id, wait_message.message_id)
        
        bot.send_message(user_id, formatted_stats, reply_markup=main_markup)
    except User.DoesNotExist:
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from bot.handlers.registration import start_registration
    start_registration(message)
