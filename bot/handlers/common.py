from bot import bot
from bot.models import User, AvitoAccount, UserAvitoAccount, DailyReport, WeeklyReport
from bot.keyboards import main_markup
from bot.texts import MAIN_TEXT
from bot.statistics import get_daily_statistics, get_weekly_statistics
import telebot
from django.db import models
import datetime

import logging

logger = logging.getLogger(__name__)

def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from bot.handlers.registration import start_registration
    start_registration(message)

def menu_m(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    bot.send_message(
        chat_id=chat_id,
        text=MAIN_TEXT,
        reply_markup=main_markup
    )

def format_expenses_message(expenses):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    if not expenses:
        return "0.00 ‚ÇΩ"
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not isinstance(expenses, dict):
        return "0.00 ‚ÇΩ"
        
    total = expenses.get('total', 0)
    details = expenses.get('details', {})
    
    if total <= 0:
        return "0.00 ‚ÇΩ"
    
    message = f"{total:.2f} ‚ÇΩ\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if details:
        message += f"üìã *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
        sorted_details = sorted(
            details.items(), 
            key=lambda x: x[1]['amount'], 
            reverse=True
        )
        
        for service, service_details in sorted_details:
            amount = service_details.get('amount', 0)
            count = service_details.get('count', 1)
            items = service_details.get('items', [])
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            items_count = len(items) if items else 0
            items_suffix = ""
            if items_count > 0:
                items_suffix = f" ({items_count} –æ–±—ä—è–≤–ª.)"
            
            message += f"   ‚Ä¢ {service}{items_suffix}: {amount:.2f} ‚ÇΩ ({count} –æ–ø–µ—Ä.)\n"
    
    return message

def select_avito_account(chat_id, user_id, callback_prefix):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û–¢–õ–ê–î–ö–ê: select_avito_account –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, chat_id: {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.filter(telegram_id=user_id).first()
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        
        if not user:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ê–≤–∏—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ
        accounts = AvitoAccount.objects.filter(
            client_id__isnull=False,
            client_secret__isnull=False
        ).exclude(client_id="none").distinct()
        
        logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ: {accounts.count()}")
        
        if not accounts.exists():
            bot.send_message(chat_id, "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ")
            logger.error(f"–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
        if accounts.count() == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            account_id = accounts.first().id
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
            if callback_prefix == "daily_report":
                daily_report_for_account(chat_id, account_id)
            else:
                weekly_report_for_account(chat_id, account_id)
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        for account in accounts:
            button = telebot.types.InlineKeyboardButton(
                text=account.name,
                callback_data=f"{callback_prefix}_{account.id}"
            )
            markup.add(button)
            logger.info(f"–û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {account.name}, callback_data: {callback_prefix}_{account.id}")
            
        bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ê–≤–∏—Ç–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=markup
        )
    except User.DoesNotExist:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def daily_report(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: daily_report –≤—ã–∑–≤–∞–Ω, user_id: {user_id}, chat_id: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    parts = call.data.split("_")
    if len(parts) > 2 and parts[0] == "daily" and parts[1] == "report":
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç daily_report_ID, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            account_id = int(parts[2])
            daily_report_for_account(chat_id, account_id)
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        select_avito_account(chat_id, user_id, "daily_report")

def weekly_report(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: weekly_report –≤—ã–∑–≤–∞–Ω, user_id: {user_id}, chat_id: {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback_data –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    parts = call.data.split("_")
    if len(parts) > 2 and parts[0] == "weekly" and parts[1] == "report":
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç weekly_report_ID, –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            account_id = int(parts[2])
            weekly_report_for_account(chat_id, account_id)
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        select_avito_account(chat_id, user_id, "weekly_report")

def daily_report_for_account(chat_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    loading_message = bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        bot.delete_message(chat_id, loading_message.message_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_daily_report_to_db(response, account)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        message_text = format_report_message_with_comparison(response, account, is_weekly=False)
        
        bot.send_message(chat_id, message_text)
        
    except AvitoAccount.DoesNotExist:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.delete_message(chat_id, loading_message.message_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            bot.delete_message(chat_id, loading_message.message_id)
        except:
            pass
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def weekly_report_for_account(chat_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    loading_message = bot.send_message(chat_id, "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –ê–≤–∏—Ç–æ...")
    
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        bot.delete_message(chat_id, loading_message.message_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_weekly_report_to_db(response, account)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        message_text = format_report_message_with_comparison(response, account, is_weekly=True)
        
        bot.send_message(chat_id, message_text)
        
    except AvitoAccount.DoesNotExist:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.delete_message(chat_id, loading_message.message_id)
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            bot.delete_message(chat_id, loading_message.message_id)
        except:
            pass
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def format_report_message(response, account_name, is_weekly=False):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
    
    Args:
        response: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        account_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        is_weekly: True –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, False –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if is_weekly:
        title = f"–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']}"
    else:
        title = f"–û—Ç—á–µ—Ç –∑–∞ {response['date']}"
    
    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    views = response['statistics']['views']
    contacts = response['statistics']['contacts']
    total_calls = response['calls']['total']
    missed_calls = response['calls']['missed']
    total_items = response['items']['total']
    
    # –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0)
    conversion = (contacts / views * 100) if views > 0 else 0
    
    # –†–∞—Å—Ö–æ–¥—ã
    total_expenses = response['expenses'].get('total', 0)
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0)
    contact_cost = (total_expenses / contacts) if contacts > 0 else 0
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    promo_expenses = 0
    xl_expenses = 0
    discount_expenses = 0
    
    for service, details in response['expenses'].get('details', {}).items():
        service_lower = service.lower()
        amount = details.get('amount', 0)
        
        if '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' in service_lower or 'promotion' in service_lower:
            promo_expenses += amount
        elif 'xl' in service_lower or '–≤—ã–¥–µ–ª–µ–Ω–∏–µ' in service_lower:
            xl_expenses += amount
        elif '—Ä–∞—Å—Å—ã–ª–∫–∞' in service_lower or '—Å–∫–∏–¥–∫–∞' in service_lower or 'discount' in service_lower:
            discount_expenses += amount
    
    # –†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    unanswered_messages = response['chats'].get('unanswered', 0)
    new_reviews = response['reviews'].get('today' if not is_weekly else 'weekly', 0)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ 100% –Ω–∞–ø—Ä—è–º—É—é
    service_level = 100.0
    
    # –§–∏–Ω–∞–Ω—Å—ã
    balance_real = response['balance_real']
    advance = response['advance']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"{title}\n\n"
    
    # –†–∞–∑–¥–µ–ª –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    message += "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
    message += f"‚úîÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏—è: {total_items} —à—Ç\n"
    message += f"‚úîÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
    message += f"‚úîÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n"
    message += f"‚úîÔ∏è–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {conversion:.1f}%\n"
    message += f"‚úîÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_cost:.0f} ‚ÇΩ\n"
    message += f"‚ùóÔ∏è–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: {total_calls}\n\n"
    
    # –†–∞–∑–¥–µ–ª —Ä–∞—Å—Ö–æ–¥–æ–≤
    message += "–†–∞—Å—Ö–æ–¥—ã\n"
    message += f"–û–±—â–∏–µ: {total_expenses:.0f} ‚ÇΩ\n"
    message += f"–ù–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ: {promo_expenses:.0f} ‚ÇΩ\n"
    message += f"–ù–∞ XL –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: {xl_expenses:.0f} ‚ÇΩ\n"
    message += f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–∏–¥–æ–∫: {discount_expenses:.0f} ‚ÇΩ\n\n"
    
    # –†–∞–∑–¥–µ–ª —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    message += "–†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
    message += f"–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–≤–æ–Ω–∫–∏: {missed_calls}\n"
    message += f"–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {unanswered_messages}\n"
    message += f"–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞: {service_level:.0f}%\n"
    message += f"–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã: {new_reviews}\n\n"
    
    # –†–∞–∑–¥–µ–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    message += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    message += f"CPA –±–∞–ª–∞–Ω—Å: {advance:.0f} ‚ÇΩ\n"
    message += f"–ö–æ—à–µ–ª–µ–∫: {balance_real:.0f} ‚ÇΩ\n"
    
    return message

def format_report_message_with_comparison(response, account, is_weekly=False):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º.
    
    Args:
        response: –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        account: –û–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ AvitoAccount
        is_weekly: True –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, False –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if is_weekly:
        previous_report = WeeklyReport.objects.filter(
            avito_account=account
        ).order_by('-date').first()
    else:
        previous_report = DailyReport.objects.filter(
            avito_account=account
        ).order_by('-date').first()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if is_weekly:
        title = f"–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {response['period']}"
    else:
        title = f"–û—Ç—á–µ—Ç –∑–∞ {response['date']}"
    
    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
    views = response['statistics']['views']
    contacts = response['statistics']['contacts']
    total_calls = response['calls']['total']
    missed_calls = response['calls']['missed']
    total_items = response['items']['total']
    
    # –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0)
    conversion = (contacts / views * 100) if views > 0 else 0
    
    # –†–∞—Å—Ö–æ–¥—ã
    total_expenses = response['expenses'].get('total', 0)
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0)
    contact_cost = (total_expenses / contacts) if contacts > 0 else 0
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    promo_expenses = 0
    xl_expenses = 0
    discount_expenses = 0
    
    for service, details in response['expenses'].get('details', {}).items():
        service_lower = service.lower()
        amount = details.get('amount', 0)
        
        if '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' in service_lower or 'promotion' in service_lower:
            promo_expenses += amount
        elif 'xl' in service_lower or '–≤—ã–¥–µ–ª–µ–Ω–∏–µ' in service_lower:
            xl_expenses += amount
        elif '—Ä–∞—Å—Å—ã–ª–∫–∞' in service_lower or '—Å–∫–∏–¥–∫–∞' in service_lower or 'discount' in service_lower:
            discount_expenses += amount
    
    # –†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    unanswered_messages = response['chats'].get('unanswered', 0)
    new_reviews = response['reviews'].get('today' if not is_weekly else 'weekly', 0)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ 100% –Ω–∞–ø—Ä—è–º—É—é
    service_level = 100.0
    
    # –§–∏–Ω–∞–Ω—Å—ã
    balance_real = response['balance_real']
    advance = response['advance']
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç
    if previous_report:
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_items_change = calculate_percentage_change(total_items, previous_report.total_items)
        views_change = calculate_percentage_change(views, previous_report.views)
        contacts_change = calculate_percentage_change(contacts, previous_report.contacts)
        conversion_change = calculate_percentage_change(conversion, previous_report.conversion_rate)
        contact_cost_change = calculate_percentage_change(contact_cost, previous_report.contact_cost)
        total_calls_change = calculate_percentage_change(total_calls, previous_report.total_calls)
        
        # –†–∞—Å—Ö–æ–¥—ã
        total_expenses_change = calculate_percentage_change(total_expenses, previous_report.total_expenses)
        promo_expenses_change = calculate_percentage_change(promo_expenses, previous_report.promo_expenses)
        xl_expenses_change = calculate_percentage_change(xl_expenses, previous_report.xl_expenses)
        discount_expenses_change = calculate_percentage_change(discount_expenses, previous_report.discount_expenses)
        
        # –†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        missed_calls_change = calculate_percentage_change(missed_calls, previous_report.missed_calls)
        unanswered_messages_change = calculate_percentage_change(unanswered_messages, previous_report.unanswered_chats)
        service_level_change = calculate_percentage_change(service_level, previous_report.service_level)
        
        # –î–ª—è –ø–æ–ª—è new_reviews –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        if is_weekly:
            new_reviews_change = calculate_percentage_change(new_reviews, previous_report.weekly_reviews)
        else:
            new_reviews_change = calculate_percentage_change(new_reviews, previous_report.new_reviews)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞, –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é
        total_items_change = views_change = contacts_change = conversion_change = 0
        contact_cost_change = total_calls_change = 0
        total_expenses_change = promo_expenses_change = xl_expenses_change = discount_expenses_change = 0
        missed_calls_change = unanswered_messages_change = service_level_change = new_reviews_change = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    message = f"{title}\n\n"
    
    # –†–∞–∑–¥–µ–ª –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    message += "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
    message += format_with_change("–û–±—ä—è–≤–ª–µ–Ω–∏—è: " + str(total_items) + " —à—Ç", total_items_change)
    message += format_with_change("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: " + str(views), views_change)
    message += format_with_change("–ö–æ–Ω—Ç–∞–∫—Ç—ã: " + str(contacts), contacts_change)
    message += format_with_change("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã: " + f"{conversion:.1f}%", conversion_change)
    message += format_with_change("–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞: " + f"{contact_cost:.0f} ‚ÇΩ", contact_cost_change)
    message += format_with_change("–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: " + str(total_calls), total_calls_change)
    message += "\n"
    
    # –†–∞–∑–¥–µ–ª —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    message += "–†–∞—Å—Ö–æ–¥—ã\n"
    message += format_with_change("–û–±—â–∏–µ: " + f"{total_expenses:.0f} ‚ÇΩ", total_expenses_change)
    message += format_with_change("–ù–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ: " + f"{promo_expenses:.0f} ‚ÇΩ", promo_expenses_change)
    message += format_with_change("–ù–∞ XL –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: " + f"{xl_expenses:.0f} ‚ÇΩ", xl_expenses_change)
    message += format_with_change("–†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–∏–¥–æ–∫: " + f"{discount_expenses:.0f} ‚ÇΩ", discount_expenses_change)
    message += "\n"
    
    # –†–∞–∑–¥–µ–ª —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    message += "–†–∞–±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
    # –î–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - —ç—Ç–æ –ø–ª–æ—Ö–æ, 
    # –∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ - —Ö–æ—Ä–æ—à–æ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message += format_with_change_inverse("–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–≤–æ–Ω–∫–∏: " + str(missed_calls), missed_calls_change)
    message += format_with_change_inverse("–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: " + str(unanswered_messages), unanswered_messages_change)
    message += format_with_change("–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞: " + f"{service_level:.0f}%", service_level_change)
    message += format_with_change("–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã: " + str(new_reviews), new_reviews_change)
    message += "\n"
    
    # –†–∞–∑–¥–µ–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    message += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    message += f"CPA –±–∞–ª–∞–Ω—Å: {advance:.0f} ‚ÇΩ\n"
    message += f"–ö–æ—à–µ–ª–µ–∫: {balance_real:.0f} ‚ÇΩ\n"
    
    return message

def format_with_change_inverse(text, change):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫,
    –≥–¥–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥, –∞ —É–º–µ–Ω—å—à–µ–Ω–∏–µ - –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π.
    
    Args:
        text: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
        change: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
    prefix = ""
    if change < 0:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - —Ö–æ—Ä–æ—à–æ
        prefix = "‚úîÔ∏è "
        change_text = f" ({change:.1f}%)"
    elif change > 0:  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - –ø–ª–æ—Ö–æ
        prefix = "‚ùóÔ∏è "
        change_text = f" (+{change:.1f}%)"
    else:
        prefix = "‚úîÔ∏è "
        change_text = " (0%)"
    
    return f"{prefix}{text}{change_text}\n"

def calculate_percentage_change(current, previous):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        float: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
    """
    if previous == 0:
        return 0  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    return ((current - previous) / previous) * 100

def format_with_change(text, change):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    
    Args:
        text: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
        change: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å
    prefix = ""
    if change > 0:
        prefix = "‚úîÔ∏è "
        change_text = f" (+{change:.1f}%)"
    elif change < 0:
        prefix = "‚ùóÔ∏è "
        change_text = f" ({change:.1f}%)"
    else:
        prefix = "‚úîÔ∏è "
        change_text = " (0%)"
    
    return f"{prefix}{text}{change_text}\n"

def send_daily_report(telegram_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –≤ Telegram –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_daily_statistics(client_id, client_secret)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_daily_report_to_db(response, account)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        message_text = format_report_message_with_comparison(response, account, is_weekly=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        bot.send_message(telegram_id, message_text)
        
    except AvitoAccount.DoesNotExist:
        logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def send_weekly_report(telegram_id, account_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –≤ Telegram –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    try:
        account = AvitoAccount.objects.get(id=account_id)
        client_id = account.client_id
        client_secret = account.client_secret
        response = get_weekly_statistics(client_id, client_secret)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_weekly_report_to_db(response, account)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        message_text = format_report_message_with_comparison(response, account, is_weekly=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        bot.send_message(telegram_id, message_text)
        
    except AvitoAccount.DoesNotExist:
        logger.error(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def add_avito_account(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ"""
    from bot.handlers.registration import add_avito_account as register_new_account
    register_new_account(message)

def get_daily_reports_for_chat(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–∞—Ç–æ–º –ø–æ daily_report_tg_id"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID —á–∞—Ç–∞ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    accounts = AvitoAccount.objects.filter(
        models.Q(daily_report_tg_id=str(chat_id)) | models.Q(daily_report_tg_id=chat_id),
        client_id__isnull=False, 
        client_secret__isnull=False
    ).exclude(client_id="none").distinct()
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ chat_id={chat_id}: {accounts.count()}")
    
    if not accounts.exists():
        # –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω
        bot.send_message(chat_id, f"–ö –¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É (ID: {chat_id}) –Ω–µ –ø—Ä–∏–ª–∏–Ω–∫–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç. –£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç ID –≤ –ø–æ–ª–µ daily_report_tg_id –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
        return
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    for account in accounts:
        daily_report_for_account(chat_id, account.id)

def get_weekly_reports_for_chat(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–∞—Ç–æ–º –ø–æ weekly_report_tg_id"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID —á–∞—Ç–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    accounts = AvitoAccount.objects.filter(
        models.Q(weekly_report_tg_id=str(chat_id)) | models.Q(weekly_report_tg_id=chat_id),
        client_id__isnull=False, 
        client_secret__isnull=False
    ).exclude(client_id="none").distinct()
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ chat_id={chat_id}: {accounts.count()}")
    
    if not accounts.exists():
        # –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω
        bot.send_message(chat_id, f"–ö –¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É (ID: {chat_id}) –Ω–µ –ø—Ä–∏–ª–∏–Ω–∫–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç. –£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç ID –≤ –ø–æ–ª–µ weekly_report_tg_id –∞–≤–∏—Ç–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
        return
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    for account in accounts:
        weekly_report_for_account(chat_id, account.id)

def save_daily_report_to_db(response, account):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç—á–µ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        date_obj = datetime.datetime.strptime(response['date'], '%d.%m.%Y').date()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –∑–∞ –¥–∞—Ç—É: {response['date']}, –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã: {date_obj}")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        deleted_count = DailyReport.objects.filter(avito_account=account, date=date_obj).delete()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {deleted_count}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
        daily_report = DailyReport(
            avito_account=account,
            date=date_obj,
            total_items=0,
            views=0,
            contacts=0,
            conversion_rate=0,
            contact_cost=0,
            total_calls=0,
            answered_calls=0,
            missed_calls=0,
            total_chats=0,
            new_chats=0,
            unanswered_chats=0,
            phones_received=0,
            rating=0,
            total_reviews=0,
            new_reviews=0,
            with_xl_promotion=0,
            favorites=0,
            total_expenses=0,
            promo_expenses=0,
            xl_expenses=0,
            discount_expenses=0,
            service_level=100,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –≤—Å–µ–≥–¥–∞ 100
            balance_real=0,
            balance_bonus=0,
            advance=0
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        calls = response.get('calls', {})
        chats = response.get('chats', {})
        statistics = response.get('statistics', {})
        items = response.get('items', {})
        reviews = response.get('reviews', {})
        expenses = response.get('expenses', {})
        expenses_details = expenses.get('details', {})
        
        # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
        promo_expenses = 0
        xl_expenses = 0
        discount_expenses = 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        for key, value in expenses_details.items():
            if '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω' in key.lower() or 'premium' in key.lower() or '–≤–∏–ø' in key.lower() or '—Ç—É—Ä–±–æ' in key.lower() or '–±—ã—Å—Ç—Ä' in key.lower():
                promo_expenses += value.get('amount', 0)
            elif 'xl' in key.lower() or '–≤—ã–¥–µ–ª–µ–Ω' in key.lower():
                xl_expenses += value.get('amount', 0)
            elif '—Å–∫–∏–¥' in key.lower() or 'discount' in key.lower():
                discount_expenses += value.get('amount', 0)
            
        # –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        total_expenses = expenses.get('total', 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ API
        daily_report.total_items = items.get('total', 0)
        daily_report.with_xl_promotion = items.get('with_xl_promotion', 0)
        daily_report.views = statistics.get('views', 0)
        daily_report.contacts = statistics.get('contacts', 0)
        
        # –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0)
        if daily_report.views > 0:
            daily_report.conversion_rate = round(daily_report.contacts / daily_report.views * 100, 2)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0)
        if daily_report.contacts > 0:
            daily_report.contact_cost = round(total_expenses / daily_report.contacts, 2)
            
        # –ó–≤–æ–Ω–∫–∏
        daily_report.total_calls = calls.get('total', 0)
        daily_report.answered_calls = calls.get('answered', 0)
        daily_report.missed_calls = calls.get('missed', 0)
        
        # –ß–∞—Ç—ã
        daily_report.total_chats = chats.get('total', 0)
        daily_report.new_chats = chats.get('new', 0)
        
        # –ü–æ–∫–∞–∑—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        daily_report.phones_received = response.get('phones_received', 0)
        
        # –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
        daily_report.rating = response.get('rating', 0)
        daily_report.total_reviews = reviews.get('total', 0)
        daily_report.new_reviews = reviews.get('today', 0)
        daily_report.with_xl_promotion = items.get('with_xl_promotion', 0)
        daily_report.favorites = statistics.get('favorites', 0)
        daily_report.total_expenses = expenses.get('total', 0)
        daily_report.promo_expenses = promo_expenses
        daily_report.xl_expenses = xl_expenses
        daily_report.discount_expenses = discount_expenses
        daily_report.service_level = 100  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –≤—Å–µ–≥–¥–∞ 100
        daily_report.balance_real = response.get('balance_real', 0)
        daily_report.balance_bonus = response.get('balance_bonus', 0)
        daily_report.advance = response.get('advance', 0)
        
        daily_report.save()
        logger.info(f"–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ {response['date']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ID={daily_report.id}")
        
        return daily_report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None

def save_weekly_report_to_db(response, account):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
        if 'period' in response:
            period_parts = response['period'].split(' - ')
            start_date = datetime.datetime.strptime(period_parts[0], '%d.%m.%Y').date()
            end_date = datetime.datetime.strptime(period_parts[1], '%d.%m.%Y').date()
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ—Ç, –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            end_date = datetime.date.today()
            start_date = end_date - datetime.timedelta(days=7)
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        WeeklyReport.objects.filter(avito_account=account, date=end_date).delete()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
        weekly_report = WeeklyReport(
            avito_account=account,
            date=end_date,
            period_start=start_date,
            period_end=end_date,
            total_items=0,
            views=0,
            contacts=0,
            conversion_rate=0,
            contact_cost=0,
            total_calls=0,
            answered_calls=0,
            missed_calls=0,
            total_chats=0,
            unanswered_chats=0,
            phones_received=0,
            rating=0,
            total_reviews=0,
            weekly_reviews=0,
            with_xl_promotion=0,
            favorites=0,
            total_expenses=0,
            promo_expenses=0,
            xl_expenses=0,
            discount_expenses=0,
            service_level=100,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –≤—Å–µ–≥–¥–∞ 100
            balance_real=0,
            balance_bonus=0,
            advance=0
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        calls = response.get('calls', {})
        chats = response.get('chats', {})
        statistics = response.get('statistics', {})
        items = response.get('items', {})
        reviews = response.get('reviews', {})
        expenses = response.get('expenses', {})
        expenses_details = expenses.get('details', {})
        
        # –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
        promo_expenses = 0
        xl_expenses = 0
        discount_expenses = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        for service_type, service_data in expenses_details.items():
            amount = service_data.get('amount', 0)
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ —Ç–∏–ø—É —É—Å–ª—É–≥–∏
            if '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' in service_type.lower() or 'bbip' in service_type.lower():
                promo_expenses += amount
            elif 'xl' in service_type.lower() or 'vas' in service_type.lower():
                xl_expenses += amount
            elif '—Å–∫–∏–¥' in service_type.lower() or 'discount' in service_type.lower():
                discount_expenses += amount
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        views = statistics.get('views', 0)
        contacts = statistics.get('contacts', 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        conversion_rate = 0
        if views > 0:
            conversion_rate = (contacts / views) * 100
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_cost = 0
        if contacts > 0:
            contact_cost = expenses.get('total', 0) / contacts
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
        weekly_report.total_items = items.get('total', 0)
        weekly_report.views = views
        weekly_report.contacts = contacts
        weekly_report.conversion_rate = conversion_rate
        weekly_report.contact_cost = contact_cost
        weekly_report.total_calls = calls.get('total', 0)
        weekly_report.answered_calls = calls.get('answered', 0)
        weekly_report.missed_calls = calls.get('missed', 0)
        weekly_report.total_chats = chats.get('total', 0)
        weekly_report.unanswered_chats = chats.get('unanswered', 0)
        weekly_report.phones_received = response.get('phones_received', 0)
        weekly_report.rating = response.get('rating', 0)
        weekly_report.total_reviews = reviews.get('total', 0)
        weekly_report.weekly_reviews = reviews.get('weekly', 0)
        weekly_report.with_xl_promotion = items.get('with_xl_promotion', 0)
        weekly_report.favorites = statistics.get('favorites', 0)
        weekly_report.total_expenses = expenses.get('total', 0)
        weekly_report.promo_expenses = promo_expenses
        weekly_report.xl_expenses = xl_expenses
        weekly_report.discount_expenses = discount_expenses
        weekly_report.service_level = 100  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞ –≤—Å–µ–≥–¥–∞ 100
        weekly_report.balance_real = response.get('balance_real', 0)
        weekly_report.balance_bonus = response.get('balance_bonus', 0)
        weekly_report.advance = response.get('advance', 0)
        
        weekly_report.save()
        logger.info(f"–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        return weekly_report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
