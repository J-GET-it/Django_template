from traceback import format_exc

from asgiref.sync import sync_to_async
from bot.handlers import *
from bot.handlers.common import get_historical_stats, format_historical_stats_message
from django.conf import settings
from django.http import HttpRequest, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_GET, require_POST
from telebot.apihelper import ApiTelegramException
from telebot.types import Update

from bot import bot, logger
import telebot


@require_GET
def set_webhook(request: HttpRequest) -> JsonResponse:
    """Setting webhook."""
    bot.set_webhook(url=f"{settings.HOOK}/bot/{settings.BOT_TOKEN}")
    bot.send_message(settings.OWNER_ID, "webhook set")
    return JsonResponse({"message": "OK"}, status=200)


@require_GET
def status(request: HttpRequest) -> JsonResponse:
    return JsonResponse({"message": "OK"}, status=200)


@csrf_exempt
@require_POST
@sync_to_async
def index(request: HttpRequest) -> JsonResponse:
    if request.META.get("CONTENT_TYPE") != "application/json":
        return JsonResponse({"message": "Bad Request"}, status=403)

    json_string = request.body.decode("utf-8")
    update = Update.de_json(json_string)
    try:
        bot.process_new_updates([update])
    except ApiTelegramException as e:
        logger.error(f"Telegram exception. {e} {format_exc()}")
    except ConnectionError as e:
        logger.error(f"Connection error. {e} {format_exc()}")
    except Exception as e:
        bot.send_message(settings.OWNER_ID, f'Error from index: {e}')
        logger.error(f"Unhandled exception. {e} {format_exc()}")
    return JsonResponse({"message": "OK"}, status=200)


"""Common"""
admin = bot.message_handler(commands=["admin"])(get_users)

# –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å chat_id
@bot.message_handler(commands=["start"])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    from bot.handlers.common import start
    chat_id = message.chat.id
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /start –≤ —á–∞—Ç–µ {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    start(message)

get_user_info = bot.callback_query_handler(lambda c: c.data.startswith("admin_"))(get_user_info)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ daily_report
def daily_report_wrapper(call):
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ daily_report callback: {call.data}")
    logger.info(f"–û–¢–õ–ê–î–ö–ê: from_user.id = {call.from_user.id}, chat_id = {call.message.chat.id}")
    try:
        daily_report(call)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ daily_report_wrapper: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ weekly_report
def weekly_report_wrapper(call):
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ weekly_report callback: {call.data}")
    logger.info(f"–û–¢–õ–ê–î–ö–ê: from_user.id = {call.from_user.id}, chat_id = {call.message.chat.id}")
    try:
        weekly_report(call)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ weekly_report_wrapper: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
def historical_stats_wrapper(call):
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ historical_stats callback: {call.data}")
    logger.info(f"–û–¢–õ–ê–î–ö–ê: from_user.id = {call.from_user.id}, chat_id = {call.message.chat.id}")
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞
        parts = call.data.split("_")
        if len(parts) >= 4 and parts[0] == "stats":
            period = parts[1]
            account_id = int(parts[3])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            if period == "7d":
                days = 7
                period_name = "7 –¥–Ω–µ–π"
            elif period == "14d":
                days = 14
                period_name = "14 –¥–Ω–µ–π"
            elif period == "30d":
                days = 30
                period_name = "30 –¥–Ω–µ–π"
            else:
                days = 7
                period_name = "7 –¥–Ω–µ–π"
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_message = bot.send_message(
                call.message.chat.id, 
                f"‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_name}..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_historical_stats(account_id, days)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            bot.delete_message(call.message.chat.id, loading_message.message_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            message = format_historical_stats_message(stats)
            bot.send_message(call.message.chat.id, message, parse_mode="Markdown")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ historical_stats_wrapper: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
daily_report_handler = bot.callback_query_handler(func=lambda c: c.data == "daily_report" or c.data.startswith("daily_report_"))(daily_report_wrapper)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
weekly_report_handler = bot.callback_query_handler(func=lambda c: c.data == "weekly_report" or c.data.startswith("weekly_report_"))(weekly_report_wrapper)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
historical_stats_handler = bot.callback_query_handler(func=lambda c: c.data.startswith("stats_"))(historical_stats_wrapper)

@bot.message_handler(commands=["daily"])
def daily_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    from bot.handlers.common import get_daily_reports_for_chat
    chat_id = message.chat.id
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /daily –≤ —á–∞—Ç–µ {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    get_daily_reports_for_chat(chat_id)

@bot.message_handler(commands=["weekly"])
def weekly_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weekly –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    from bot.handlers.common import get_weekly_reports_for_chat
    chat_id = message.chat.id
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /weekly –≤ —á–∞—Ç–µ {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    get_weekly_reports_for_chat(chat_id)

@bot.message_handler(commands=["stats"])
def stats_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /stats –≤ —á–∞—Ç–µ {chat_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        from bot.models import AvitoAccount
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ê–≤–∏—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ
        accounts = AvitoAccount.objects.filter(
            client_id__isnull=False,
            client_secret__isnull=False
        ).exclude(client_id="none").distinct()
        
        if not accounts.exists():
            bot.send_message(chat_id, "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ê–≤–∏—Ç–æ")
            return
            
        if accounts.count() == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            account_id = accounts.first().id
            account_name = accounts.first().name
            
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ó–∞ 7 –¥–Ω–µ–π", 
                callback_data=f"stats_7d_acc_{account_id}"
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ó–∞ 14 –¥–Ω–µ–π", 
                callback_data=f"stats_14d_acc_{account_id}"
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ó–∞ 30 –¥–Ω–µ–π", 
                callback_data=f"stats_30d_acc_{account_id}"
            ))
            
            bot.send_message(
                chat_id=chat_id,
                text=f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ *{account_name}*:",
                reply_markup=markup,
                parse_mode="Markdown"
            )
            return
            
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        markup = telebot.types.InlineKeyboardMarkup()
        for account in accounts:
            markup.add(telebot.types.InlineKeyboardButton(
                text=account.name,
                callback_data=f"select_stats_acc_{account.id}"
            ))
            
        bot.send_message(
            chat_id=chat_id,
            text="üìä –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.callback_query_handler(func=lambda c: c.data.startswith("select_stats_acc_"))
def select_account_for_stats(call):
    chat_id = call.message.chat.id
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {call.data}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
        parts = call.data.split("_")
        if len(parts) >= 4:
            account_id = int(parts[3])
            
            from bot.models import AvitoAccount
            account = AvitoAccount.objects.get(id=account_id)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ó–∞ 7 –¥–Ω–µ–π", 
                callback_data=f"stats_7d_acc_{account_id}"
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ó–∞ 14 –¥–Ω–µ–π", 
                callback_data=f"stats_14d_acc_{account_id}"
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ó–∞ 30 –¥–Ω–µ–π", 
                callback_data=f"stats_30d_acc_{account_id}"
            ))
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ *{account.name}*:",
                reply_markup=markup,
                parse_mode="Markdown"
            )
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏:")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda c: c.data == "stats_menu")
def stats_menu_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥', user_id: {user_id}, chat_id: {chat_id}")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stats
    stats_command(call.message)

@bot.message_handler(commands=["populate"])
def populate_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /populate –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
    if str(user_id) != settings.OWNER_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê: –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /populate –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        msg = bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 60):"
        )
        bot.register_next_step_handler(msg, process_populate_days)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã populate: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def process_populate_days(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    chat_id = message.chat.id
    
    try:
        days = int(message.text.strip())
        if days < 1 or days > 60:
            bot.send_message(chat_id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        bot.send_message(
            chat_id,
            f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {days} –¥–Ω–µ–π...\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        from bot.cron import populate_historical_data
        
        def populate_and_notify():
            try:
                populate_historical_data(days)
                bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {days} –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        thread = threading.Thread(target=populate_and_notify)
        thread.start()
        
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –¥–Ω–µ–π: {e}")
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
@bot.message_handler(commands=["format"])
def format_command_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /format –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    from bot.handlers.common import toggle_report_format
    toggle_report_format(message)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
def handle_report_format_selection_wrapper(call):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    from bot.handlers.common import handle_report_format_selection
    handle_report_format_selection(call)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
format_selection_handler = bot.callback_query_handler(func=lambda c: c.data.startswith("report_format_"))(handle_report_format_selection_wrapper)